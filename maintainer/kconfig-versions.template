#
# DO NOT EDIT! This file is automatically generated.
#

# The component directory name
config @@masterpfx@@_DIR_NAME
    string
    default "@@master@@"

#!if [ "@@nforks@@" -ge 2 ]

choice
    bool "Show @@master@@ versions from"

#!foreach fork
config @@masterpfx@@_USE_@@originpfx@@
    bool "@@origin@@"
#!if [ -n "@@only_obsolete@@" ]
    depends on OBSOLETE
#!end-if
#!if [ -n "@@only_experimental@@" ]
    depends on EXPERIMENTAL
#!end-if
    help
@@originhelp@@

#!end-foreach
endchoice

config @@masterpfx@@_USE
    string
#!foreach fork
    default "@@pfx@@" if @@masterpfx@@_USE_@@originpfx@@
#!end-foreach

#!end-if

#!foreach fork
#!if [ "@@nforks@@" -ge 2 ]
if @@masterpfx@@_USE_@@originpfx@@
#!end-if

config @@pfx@@_PKG_NAME
    string
    default "@@pkg_name@@"

#!// If a project makes official releases, using "bleeding edge"
#!// from a development repository is experimental. However, there
#!// are projects that consider its HEAD a "rolling release". For
#!// those, checking out from a repository is the regular method.
choice
    bool "Source of @@pkg_label@@"

#!if [ -n "@@all_versions@@" ]
config @@pfx@@_SRC_RELEASE
    bool "Released tarball"
    help
      Download a released tarball.

#!end-if
config @@pfx@@_SRC_DEVEL
    bool "Vendor/custom repository"
#!if [ -n "@@all_versions@@" ]
    depends on EXPERIMENTAL
#!end-if
    help
      Check out from a repository.
#!if [ -n "@@repository@@" ]
      Default is the vendor repository at @@repository_url@@
#!end-if

if @@pfx@@_SRC_DEVEL

choice
    bool "VCS type"
#!if [ -n "@@repository@@" ]
    default @@pfx@@_DEVEL_VCS_@@vcs@@
#!end-if
    help
      Version control system from which the sources will be checked out.
      The default value points to the development repository for @@pkg_label@@.

config @@pfx@@_DEVEL_VCS_git
    bool "Git"

config @@pfx@@_DEVEL_VCS_svn
    bool "Subversion"

config @@pfx@@_DEVEL_VCS_hg
    bool "Mercurial"

config @@pfx@@_DEVEL_VCS_cvs
    bool "CVS"

endchoice

config @@pfx@@_DEVEL_VCS
    string
    default "git" if @@pfx@@_DEVEL_VCS_git
    default "svn" if @@pfx@@_DEVEL_VCS_svn
    default "hg" if @@pfx@@_DEVEL_VCS_hg
    default "cvs" if @@pfx@@_DEVEL_VCS_cvs

config @@pfx@@_DEVEL_URL
    string "Repository URL"
#!if [ -n "@@repository@@" ]
    default "@@repository_url@@"
#!end-if
    help
      Repository URL.

      For CVS, enter both the value of CVS root and the module name, separated
      by a space.

config @@pfx@@_DEVEL_BRANCH
    string "Branch/tag to check out"
    default "@@repository_branch@@"
    help
      Git/CVS: branch/tag to be checked out
      Subversion: directories to append to the repository URL (i.e. branch or tag)
      Mercurial: official guide recommends using separate repositories to maintain
      stable branches. You likely need to change the repository URL, rather than
      enter anything here.

config @@pfx@@_DEVEL_REVISION
    string "Revision/changeset"
    default "@@repository_cset@@"
    help
      Commit ID or revision ID to check out.
      Git: enter the commit ID to check out a commit.
      CVS: enter the date in "YYYY/MM/DD HH:MM:SS" format (UTC) to check out certain date.
      Subversion: enter the revision.

config @@pfx@@_DEVEL_SUBDIR
    string "Subdirectory in the repository"
    default "@@repository_subdir@@"
    help
      Some projects produce releases not from the top-level directory in the
      repository, but rather from some subdirectory. If it is the case,
      specify this subdirectory here.

config @@pfx@@_DEVEL_BOOTSTRAP
    string "Bootstrap command"
    default "@@bootstrap@@"
    help
      Command to run after checking out. Some projects don't store the generated
      files like configure script in the repository; building out of a checked out
      working copy thus requires some extra steps. Separate multiple shell commands
      with &&.

endif

config @@pfx@@_SRC_CUSTOM
    bool "Custom location"
    depends on EXPERIMENTAL
    help
      Custom directory or tarball.

if @@pfx@@_SRC_CUSTOM

config @@pfx@@_CUSTOM_LOCATION
    string "Custom source location"
    help
      Path to the directory or tarball with the sources.

endif

endchoice

#!if [ -n "@@all_versions@@" ]
config @@pfx@@_MIRRORS
    string
    default "@@mirrors@@"

config @@pfx@@_ARCHIVE_FILENAME
    string
    default "@@archive_filename@@"

config @@pfx@@_ARCHIVE_DIRNAME
    string
    default "@@archive_dirname@@"

#!end-if

#!// Below, we explicitly select all milestones to which a given version
#!// compares greater-or-equal. We don't select just the latest applicable
#!// (and letting milestones chain-select each other, with FOO_6_or_later
#!// selecting FOO_5_or_later and so on) so that we can handle the cases
#!// where we need to identify a range of releases on a branch, for example,
#!// "all FOO releases after 4.9.1 but before 4.9.3".
#!//
#!if [ -n "@@all_versions@@" -a -z "@@versionlocked@@" ]
choice
    bool "Version of @@pkg_label@@"
    help
      For a released version, select the version of @@pkg_label@@ to download
      and build. For sources out of the vendor repository or from a custom
      location, select the version that describes those custom sources.
      Based on this version, crosstool-NG may apply some version-specific
      quirks while building @@pkg_label@@.

config @@pfx@@_VERY_NEW
    bool "newer than anything below"
    depends on EXPERIMENTAL
    depends on @@pfx@@_SRC_DEVEL || @@pfx@@_SRC_CUSTOM
#!foreach milestone
    select @@masterpfx@@_@@ms_kcfg@@_or_later
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_older
#!end-foreach

#!foreach version
config @@pfx@@_V_@@kcfg@@
    bool "@@ver@@@@ver_postfix@@"
#!if [ "@@obsolete@@" = "yes" ]
    depends on OBSOLETE
#!end-if
#!if [ "@@experimental@@" = "yes" ]
    depends on EXPERIMENTAL
#!end-if
#!foreach milestone
#!if [ "@@version_cmp_milestone@@" -ge 0 ]
    select @@masterpfx@@_@@ms_kcfg@@_or_later
#!end-if
#!if [ "@@version_cmp_milestone@@" -le 0 ]
    select @@masterpfx@@_@@ms_kcfg@@_or_older
#!end-if
#!if [ "@@version_cmp_milestone@@" -gt 0 ]
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_older
#!end-if
#!if [ "@@version_cmp_milestone@@" -lt 0 ]
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_later
#!end-if
#!end-foreach

#!end-foreach
config @@pfx@@_VERY_OLD
    bool "older than anything above"
    depends on OBSOLETE && EXPERIMENTAL
    depends on @@pfx@@_SRC_DEVEL || @@pfx@@_SRC_CUSTOM
#!foreach milestone
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_later
#!end-foreach

endchoice
#!end-if

#!if [ -n "@@versionlocked@@" ]
#!foreach version
config @@pfx@@_V_@@kcfg@@
    def_bool y
    depends on @@versionlocked@@_V_@@kcfg@@

#!end-foreach
#!end-if

config @@pfx@@_VERSION
    string
#!foreach version
    default "@@ver@@" if @@pfx@@_V_@@kcfg@@
#!end-foreach
    default "unknown"

#!if [ "@@nforks@@" -ge 2 ]
endif
#!end-if

#!end-foreach

#!foreach milestone
#!// Milestones selected by a chosen version of this package
config @@masterpfx@@_@@ms_kcfg@@_or_later
    bool

config @@masterpfx@@_@@ms_kcfg@@_or_older
    bool

#!// Milestone requirements selected by other packages that restrict
#!// the choices in this package
config @@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_later
    bool

config @@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_older
    bool

#!end-foreach
